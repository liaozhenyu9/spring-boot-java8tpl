server:
  port: 8080

spring:
  profiles:
    active: REL
  datasource:
    druid:
      filter:
        slf4j:  #日志配置
          enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      xxx:
        url: jdbc:mysql://localhost:3306/eqm?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&zeroDateTimeBehavior=convertToNull
        username: root
        password: root
        driver-class-name: com.mysql.cj.jdbc.Driver
        initial-size: 1
        max-active: 15
  cloud:
    function:
      definition: consumer1;consumer2;strConsumer;userConsumer  #告诉Spring Cloud，这些都是用于函数处理的Bean
    stream:
      kafka:
        binder:
          brokers: 120.25.177.66:9092 #broker列表，一个broker表示一个kafka服务器。
#      binders:
#        defaultKafka:
#          type: kafka
#          environment:
#            spring:
#              cloud:
#                stream:
#                  kafka:
#                    binder:
#                      brokers: 120.25.177.66:9092 #broker列表，一个broker表示一个kafka服务器。
      bindings:
        supplier1-out-0:
          destination: supplierTest1
        supplier2-out-0:
          destination: supplierTest2

        consumer1-in-0:
          destination: supplierTest1
          group: consumer1Group
        consumer2-in-0:
          destination: supplierTest2
          group: consumer2Group

        producerUser-out-0:
          destination: test_create_user
        strConsumer-in-0:
          destination: test_create_user
          group: strConsumerGroup
        userConsumer-in-0:
          destination: test_create_user
          group: userConsumerGroup

#        produceUser-out-0:
#          binder: defaultKafka
#          destination: produceUserTopic
#        processUser-in-0:
#          binder: defaultKafka
#          destination: produceUserTopic
#          group: processUserGroup
#        processUser-out-0:
#          binder: defaultKafka
#          destination: processUserTopic
#        consumerUser-in-0:
#          binder: defaultKafka
#          destination: processUserTopic
#          group: consumerUserGroup


feign:
  httpclient:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 30000
        loggerLevel: FULL
      localhost:
        connectTimeout: 5000
        readTimeout: 10000

http:
  pool:
    conn:
      maxTotal: 100 #整个HttpClient实例的最大并发连接数
      defaultMaxPerRoute: 50  #每个目标主机的最大并发数
      connectionRequestTimeout: 10000 #从连接池中获取到连接的超时时间
      connectTimeout: 15000 #客户端创建连接超时时间
      socketTimeout: 60000  #服务端响应超时时间
      validateAfterInactivity: 120000  #不活跃连接校验时间，使用连接时如果连接的空闲的时间超过该时间会先校验连接是否有效 (2分钟)
      connTimeToLive: 3600000  #连接最大存活时间 (1小时)
      maxIdleTime: 1200000 #连接最大的空闲时间，空闲多久会被后台线程清除掉  (20分钟)



jsonplaceholder:
  url: https://jsonplaceholder.typicode.com